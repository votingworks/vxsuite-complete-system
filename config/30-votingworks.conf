template(name="jsonfmt" type="list") {
    constant(value="{")
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    constant(value=",")
    property(outname="host" name="hostname" format="jsonf")
    constant(value=",")
    property(outname="message" name="msg" position.from="2")
    constant(value="\n")
}

# reformat json messages into one json blob and send to vx-logs.log
if $programname == "votingworksapp" and re_match($msg,'^ *\\{.*\\} *$') then /var/log/votingworks/vx-logs.log;jsonfmt
&stop # excludes the messages matched above from being matched by other rules
# send all other non-json messages from votingworksapp to the main syslog
if $programname == "votingworksapp" then -/var/log/votingworks/syslog
&stop # While we have no other cases below that route to syslog, everything goes to syslog by default so stop to prevent a double log

template(name="usbDeviceInformation" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="usb-device-change-detected" format="jsonf")
    constant(outname="eventType" value="system-status" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="na" format="jsonf")
}

if $programname == "kernel" and ($msg startsWith "usb") then /var/log/votingworks/vx-logs.log;usbDeviceInformation

# Handle routing of system logs

## Route logs for machine boot
template(name="machineBootInit" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="machine-boot-init" format="jsonf")
    constant(outname="eventType" value="system-action" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="na" format="jsonf")
    constant(outname="message" value="Machine boot initiated" format="jsonf")
}
template(name="machineBootSuccess" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="machine-boot-complete" format="jsonf")
    constant(outname="eventType" value="system-status" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="success" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

if $programname == "kernel" and $msg startswith "Kernel command line:" then /var/log/votingworks/vx-logs.log;machineBootInit
if $syslogtag == "systemd[1]:" and $msg contains "Startup finished" then /var/log/votingworks/vx-logs.log;machineBootSuccess

## Route logs for machine shutdown
template(name="machineShutdownInit" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="machine-shutdown-init" format="jsonf")
    constant(outname="eventType" value="system-action" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="na" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}
template(name="machineShutdownSuccess" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="machine-shutdown-complete" format="jsonf")
    constant(outname="eventType" value="system-status" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="success" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

if $programname == "systemd-logind" and ($msg contains "System is rebooting" or $msg contains "System is powering down") then /var/log/votingworks/vx-logs.log;machineShutdownInit
if $syslogtag == "systemd[1]:" and $msg contains "Stopped systemd-update-utmp.service" then /var/log/votingworks/vx-logs.log;machineShutdownSuccess

## Sudo actions
template(name="sudoAction" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="sudo-action" format="jsonf")
    constant(outname="eventType" value="user-action" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="na" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

if $syslogtag contains "sudo" then /var/log/votingworks/vx-logs.log;sudoAction

## Password changes
template(name="passwdChange" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="password-change" format="jsonf")
    constant(outname="eventType" value="user-action" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="success" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

if $syslogtag contains "passwd" then /var/log/votingworks/vx-logs.log;passwdChange

## dm-verity boot logs
template(name="dmverityBoot" type="list" option.jsonf="on") {
    property(outname="timeLogWritten" name="timereported" dateformat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    constant(outname="source" value="system" format="jsonf")
    constant(outname="eventId" value="dmverity-boot" format="jsonf")
    constant(outname="eventType" value="system-status" format="jsonf")
    constant(outname="user" value="system" format="jsonf")
    constant(outname="disposition" value="success" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

if $syslogtag == "systemd[1]:" and $msg contains "Reached target veritysetup" then /var/log/votingworks/vx-logs.log;dmverityBoot
